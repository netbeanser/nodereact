1. Проект предназначен для миграции данных из БД MongoDb в БД PostgreSql
Коллекция документов в БД MongoDb называется opus. 
Задача: "препарировать" каждый документ из колекции и выделить части,
соответствующие данным автора и данным публикации с последубшей записью в 
таблицы БД Postgres (соответственно, authortbl и opustbl с сохранением  
межтабличной связи типа one-to-many по внешнему ключу в таблице opustbl (many) к таблице authortbl (one).

Т.к. для проверки работы приложения придется инсталлировать MongoDb, PostgreSql, соотв. модули для NodeJS,
а также создавать коллекцию документов в MongoDb и таблицы в Postgres, а это дело, как минимум, не быстрое,
то пока могу предложить только код и скриншот (прилагается).
Хотя есть вариант положить проект в публичное облако, но это тоже не быстро.

2. Коллекция документов в БД MongoDb уже существует 
(с данными, взятыми от фонаря,и там есть нецензурные выражения, 
но для иллюстрации работы это не имеет значения).
таблицы в БД PostgreSql созданы заранее, они пустые (см. прилагаемый файл db_schema.sql).

3. Основная (роутинговая) часть создана на express.js с помощью express-generator (см. app.js и /bin/www)
Пользательская часть (front-end) создана на ReactJS  спомощью react-create-app и находится в каталоге ./migrator

Структура каталогов (без node_modules) есть в файле dirstruct.txt

4. Инициализационная часть взаимодействия с БД находится в каталогах ./db/pdb (для Postgres) и ./db/mdb (для Mongo),
откуда экспортируются нужные функции.

5. Роутинг запросов осуществляется в главном модуле app.js, обработчики запросов положены в каталог ./routes/mndb и ./routes/pgdb

6. Перенаправление запросов из ReactJS (то, что видно в броузере) в ExpressJS (котрый обращается к БД)
делается волшебной строчкой "proxy": "http://localhost:33711"
в файле ./migrator/package.json

7. Фактически работают два web-сервера: ползовательский (front-end) на ReactJS на порту localhost:3000,
и backend (express-овский) - на порту 33711 (жестко зашит, хотя можно и config-file какой-нибудь сделать).


8. По мере обработки документов из коллекции opus в БД Mongo и записи в таблицы БД Postgres 
(с наложением отношения one-to-many, то есть через внешний ключ authortbl (one) <=> opustbl (many))
созданный в модуле routes/mndb/mnopus.js WebSocketServer (висит на порту 33712, жестко зашит)
отправляет WebSocketClient'у (находится в модуле  migrator/src/MigrationProgress.js) сообщение,
которое меняет this.state этого компонента, что ведет к ререндерингу компонента и отображению 
обработанного документа.
Также в каталоге routes/mndb/ есть файлы mnopus_p.js и mnopus_0.js.
Они в данном случае (именно в данном) не подходят из-за асинхронной природы NodeJS. Приведены для иллюстрации.

Работающий файл mnopus.js использует пакет pg-native с синхронной обработкой запросов к БД Postgres 
и работает только на Linux, где есть библиотека libpq.so.

9. Что не успел сделать.
9.1 Чтобы все выглядело красиво. Хотя это не совсем моя област.
9.2 Культурную обработку некоторых исключительных ситуаций, 
хотя не везде у меня есть доступ ко внутреннему состоянию исползуемых компонетов.
9.3 Оперативное обновление отображений таблиц Postgres в броузере.
Сейчас заполненные таблицы opustbl и authortbl видны только по окончании процесса миграции данных.